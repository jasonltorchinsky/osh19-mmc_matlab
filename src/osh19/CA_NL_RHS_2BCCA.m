% Reed Ogrosky
% Virginia Commonwealth University, Department of Mathematics and Applied
% Mathematics
% 1/11/2017

% Purpose of script:  Calculate the RHS of the time-marching equations for
% u,v,theta,qt,w,p

% The variables utemp, vtemp, tetemp, and qttemp are baroclinic variables
[numy,numx,numz]=size(utemp);              
numlevs=numz-1;
uRHS=zeros(size(utemp));
vRHS=zeros(size(vtemp));
zRHS=zeros(size(ztemp));
thetaRHS=zeros(size(thanomtemp));
qRHS=zeros(size(qtemp));

% Dealias u,v,w,theta,qt,p
utemp=dealias(utemp,dafrac);
vtemp=dealias(vtemp,dafrac);
ztemp=dealias(ztemp,dafrac);
ptemp=dealias(ptemp,dafrac);
wtemp=dealias(wtemp,dafrac);
qanomtemp=dealias(qanomtemp,dafrac);
thanomtemp=dealias(thanomtemp,dafrac);

% Calculate BT variables
[ubar,vbar,u2bar,uvbar,v2bar,pbar]=CA_NL_calc_pbar(utemp,vtemp,ztemp,beta,YY,scalex,scaley,dafrac);
u2bar=dealias(u2bar,dafrac);
v2bar=dealias(v2bar,dafrac);
uvbar=dealias(uvbar,dafrac);

% Calculate *total* winds at each level j=1,...,J-1
utot=zeros(numy,numx,numlevs+1);
vtot=zeros(numy,numx,numlevs+1);
for icount=2:numlevs
    utot(:,:,icount)=utemp(:,:,icount)+ubar;
    vtot(:,:,icount)=vtemp(:,:,icount)+vbar;
end 

% Calculate *total* winds at top level, j=J
utot(:,:,numlevs+1)=numlevs*ubar-squeeze(sum(utot(:,:,2:numlevs),3));
vtot(:,:,numlevs+1)=numlevs*vbar-squeeze(sum(vtot(:,:,2:numlevs),3));

u2tot=utot.^2;
uvtot=utot.*vtot;
v2tot=vtot.^2;

% Question:  Do we need to take derivative of beta*Y numerically, not analytically???
% Current answer:  Take derivative numerically

% Calculate zeta RHS
zRHS(:,:,1)=zRHS(:,:,1)...
        -D1(beta*YY,'y',scaley).*vbar-1/tau_u*ztemp(:,:,1)...   
        -D2(uvbar(:,:,1),'x','x',scalex,scalex)+D2(uvbar(:,:,1),'y','y',scaley,scaley)...
        -D2(v2bar(:,:,1),'x','y',scalex,scaley)+D2(u2bar(:,:,1),'x','y',scalex,scaley); %...
   

for jcount=2:numlevs   

    % Calculate u RHS
    utotavg1=mean(utot(:,:,jcount:jcount+1),3);
    utotavg2=mean(utot(:,:,jcount-1:jcount),3);
    uRHS(:,:,jcount)=uRHS(:,:,jcount)...
        +beta*YY.*vtemp(:,:,jcount)...                                                 
        -D1(ptemp(:,:,jcount),'x',scalex)...                                         
        -1/tau_u*utemp(:,:,jcount)...
        +D1(u2bar,'x',scalex)+D1(uvbar,'y',scaley)...
        -D1(squeeze(u2tot(:,:,jcount)),'x',scalex)...   
        -D1(squeeze(uvtot(:,:,jcount)),'y',scaley)...   
        -1/dz*(wtemp(:,:,jcount).*utotavg1-wtemp(:,:,jcount-1).*utotavg2); 
    
    
    % Calculate v RHS
    vtotavg1=mean(vtot(:,:,jcount:jcount+1),3);
    vtotavg2=mean(vtot(:,:,jcount-1:jcount),3);
    vRHS(:,:,jcount)=vRHS(:,:,jcount)...
        -beta*YY.*utemp(:,:,jcount)...                    
        -D1(ptemp(:,:,jcount),'y',scaley)...              
        -1/tau_u*vtemp(:,:,jcount)... 
        +D1(uvbar,'x',scalex)+D1(v2bar,'y',scaley)...
        -D1(squeeze(uvtot(:,:,jcount)),'x',scalex)...   
        -D1(squeeze(v2tot(:,:,jcount)),'y',scaley)...
        -1/dz*(wtemp(:,:,jcount).*vtotavg1-wtemp(:,:,jcount-1).*vtotavg2); %...
    
    % Calculate theta RHS
    thetaRHS(:,:,jcount)=thetaRHS(:,:,jcount)...
        -1/(2*dz)*wtemp(:,:,jcount).*(thetatildemat(:,:,jcount+1)-thetatildemat(:,:,jcount-1))...
        -1/tau_theta*thanomtemp(:,:,jcount)...
        -D1(squeeze(thanomtemp(:,:,jcount)).*utotavg1,'x',scalex)...   
        -D1(squeeze(thanomtemp(:,:,jcount)).*vtotavg1,'y',scaley)...
        -1/(2*dz)*(wtemp(:,:,jcount+1).*thanomtemp(:,:,jcount+1)-wtemp(:,:,jcount-1).*thanomtemp(:,:,jcount-1)); %...
    if use_2BCConvAdj==1
        thetaRHS(:,:,jcount)=thetaRHS(:,:,jcount)...
            +sqrt(2)*Lv/cp/tau_upper*(sqrt(3)/numlevs*sum(qanomtemp(:,:,2:numlevs).*sinzmat,3)-4*sqrt(3)/numlevs*sum(qanomtemp(:,:,2:numlevs).*sin2zmat,3))...
            .*(sinzvec(jcount-1)-1/2*sin2zvec(jcount-1))...
            +sqrt(2)*Lv/cp/tau_lower*(sqrt(3)/numlevs*sum(qanomtemp(:,:,2:numlevs).*sinzmat,3)+4*sqrt(3)/numlevs*sum(qanomtemp(:,:,2:numlevs).*sin2zmat,3))...
            .*(sinzvec(jcount-1)+1/2*sin2zvec(jcount-1));
    elseif use_2BCConvAdj==2
        thetaRHS(:,:,jcount)=thetaRHS(:,:,jcount)...
            +sqrt(2)*Lv/cp/tau_upper*(sqrt(3)/numlevs*sum(qanomtemp(:,:,2:numlevs).*sinzmat,3)-4*sqrt(3)/numlevs*sum(qanomtemp(:,:,2:numlevs).*sin2zmat,3))...
            .*(sinzvec(jcount-1)-1/2*sin2zvec(jcount-1))...
            +sqrt(2)*Lv/cp/tau_lower*(2/numlevs*sum(qanomtemp(:,:,2:numlevs).*sinzmat,3))...
            .*(sinzvec(jcount-1));
    else
        thetaRHS(:,:,jcount)=thetaRHS(:,:,jcount)+Lv/cp/tauvec(jcount-1)*qanomtemp(:,:,jcount);
    end

    
    
    %%%%% MAKE SURE YOU CHECK ANOMALIES VS BACKGROUND STATE HERE %%%%%
    % Calculate q RHS
    qRHS(:,:,jcount)=qRHS(:,:,jcount)...
        -1/(2*dz)*wtemp(:,:,jcount).*(qbgmat(:,:,jcount+1)-qbgmat(:,:,jcount-1))...
        +bvec(jcount-1)*(D2(qanomtemp(:,:,jcount),'x','x',scalex,scalex)+D2(qanomtemp(:,:,jcount),'y','y',scaley,scaley))...
        +Dvvec(jcount-1)/dz^2*(qanomtemp(:,:,jcount+1)-2*qanomtemp(:,:,jcount)+qanomtemp(:,:,jcount-1))...
        -D1(squeeze(qanomtemp(:,:,jcount)).*utotavg1,'x',scalex)...   
        -D1(squeeze(qanomtemp(:,:,jcount)).*vtotavg1,'y',scaley)...
        -vtotavg1.*D1(squeeze(qbgmat(:,:,jcount)),'y',scaley)...
        -1/(2*dz)*(wtemp(:,:,jcount+1).*qanomtemp(:,:,jcount+1)-wtemp(:,:,jcount-1).*qanomtemp(:,:,jcount-1)); %...
    if use_2BCConvAdj==1
        qRHS(:,:,jcount)=qRHS(:,:,jcount)...
            -sqrt(2)/tau_upper*(sqrt(3)/numlevs*sum(qanomtemp(:,:,2:numlevs).*sinzmat,3)-4*sqrt(3)/numlevs*sum(qanomtemp(:,:,2:numlevs).*sin2zmat,3))...
            .*(sinzvec(jcount-1)-1/2*sin2zvec(jcount-1))...
            -sqrt(2)/tau_lower*(sqrt(3)/numlevs*sum(qanomtemp(:,:,2:numlevs).*sinzmat,3)+4*sqrt(3)/numlevs*sum(qanomtemp(:,:,2:numlevs).*sin2zmat,3))...
            .*(sinzvec(jcount-1)+1/2*sin2zvec(jcount-1));
    elseif use_2BCConvAdj==2
        qRHS(:,:,jcount)=qRHS(:,:,jcount)...
            -sqrt(2)/tau_upper*(sqrt(3)/numlevs*sum(qanomtemp(:,:,2:numlevs).*sinzmat,3)-4*sqrt(3)/numlevs*sum(qanomtemp(:,:,2:numlevs).*sin2zmat,3))...
            .*(sinzvec(jcount-1)-1/2*sin2zvec(jcount-1))...
            -sqrt(2)/tau_lower*(2/numlevs*sum(qanomtemp(:,:,2:numlevs).*sinzmat,3))...
            .*(sinzvec(jcount-1));
    else
        qRHS(:,:,jcount)=qRHS(:,:,jcount)-1/tauvec(jcount-1)*qanomtemp(:,:,jcount);
    end
    
end


% Dealias output
uRHS=dealias(uRHS,dafrac);
vRHS=dealias(vRHS,dafrac);
qRHS=dealias(qRHS,dafrac);
thetaRHS=dealias(thetaRHS,dafrac);
zRHS=dealias(zRHS,dafrac);
